{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/Tracklist/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","album","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","Id","App","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAEIA,E,gGC+BWC,E,kDA7BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,KAAM,IAGV,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBART,E,0CAUnB,WACIE,KAAKN,MAAMO,SAASD,KAAKL,MAAMC,Q,8BAEnC,SAAiBM,GACbF,KAAKG,SAAS,CAACP,KAAMM,EAAME,OAAOC,U,oBAEtC,WACI,OACI,sBAAKC,UAAU,YAAf,UACI,uBACAC,YAAY,iCACZC,SAAUR,KAAKD,mBAEf,wBAAQO,UAAU,eAAeG,QAAST,KAAKH,OAA/C,2B,GAxBQa,IAAMC,WCmCfC,G,oEAjCX,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IACDmB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBAHJ,E,gDAMnB,WACI,OAAIE,KAAKN,MAAMqB,UACJ,wBAAQT,UAAU,eAAeG,QAAST,KAAKc,YAA/C,eAEA,wBAAQR,UAAU,eAAeG,QAAST,KAAKa,SAA/C,iB,sBAGf,WACIb,KAAKN,MAAMsB,MAAMhB,KAAKN,MAAMuB,S,yBAEhC,WACIjB,KAAKN,MAAMwB,SAASlB,KAAKN,MAAMuB,S,oBAEnC,WACI,OAAO,sBAAKX,UAAU,QAAf,UACH,sBAAKA,UAAU,oBAAf,UAEI,6BAAKN,KAAKN,MAAMuB,MAAME,OAEtB,8BAAInB,KAAKN,MAAMuB,MAAMG,OAArB,MAAgCpB,KAAKN,MAAMuB,MAAMG,aAGpDpB,KAAKqB,sB,GA7BEX,IAAMC,YCmBXW,E,4JAlBX,WAAU,IAAD,OACL,OACI,qBAAKhB,UAAU,YAAf,SAEQN,KAAKN,MAAM6B,OAAOC,KAAI,SAAAP,GAClB,OAAO,cAAC,EAAD,CACPA,MAAOA,EAEPD,MAAO,EAAKtB,MAAMsB,MAClBE,SAAU,EAAKxB,MAAMwB,SACrBH,UAAW,EAAKrB,MAAMqB,WAHjBE,EAAMQ,a,GARXf,IAAMC,WCgBfe,E,4JAfX,WACI,OACI,sBAAKpB,UAAU,gBAAf,UACI,yCAEA,cAAC,EAAD,CACAiB,OAAQvB,KAAKN,MAAMiC,cACnBX,MAAOhB,KAAKN,MAAMsB,MAClBD,WAAW,W,GATCL,IAAMC,WC+BnBiB,G,wDA5BX,WAAYlC,GAAQ,IAAD,8BACf,cAAMA,IACDmC,iBAAmB,EAAKA,iBAAiB/B,KAAtB,gBAFT,E,oDAInB,SAAiBI,GACbF,KAAKN,MAAMoC,aAAa5B,EAAME,OAAOC,S,oBAEzC,WACI,OACI,sBAAKC,UAAU,WAAf,UAEI,uBACAyB,aAAc/B,KAAKN,MAAMsC,aACzBxB,SAAUR,KAAK6B,mBAEf,cAAC,EAAD,CACAN,OAAQvB,KAAKN,MAAMuC,eACnBf,SAAUlB,KAAKN,MAAMwB,SACrBH,WAAW,IAGX,wBAAQT,UAAU,gBAAgBG,QAAST,KAAKN,MAAMwC,OAAtD,oC,GAtBOxB,IAAMC,YLFvBwB,EAAU,CACZC,eADY,WAER,GAAI5C,EACA,OAAOA,EAIX,IAAM6C,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAiBJ,OAAOC,SAASC,KAAKC,MAAM,sBAElD,GAAIJ,GAAoBK,EAAgB,CACpClD,EAAc6C,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAOxC,OAHAJ,OAAOO,YAAW,kBAAMrD,EAAc,KAAgB,IAAZmD,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KAExCvD,EAEP,IAAMwD,EAAS,2DAzBV,mCAyBU,0EAxBP,yBAyBRV,OAAOC,SAAWS,GAG1BnD,OAzBY,SAyBLD,GACH,IAAMJ,EAAc2C,EAAQC,iBAC5B,OAAOa,MAAM,kDAAD,OAAmDrD,GAAQ,CACnEsD,QAAS,CACLC,cAAc,UAAD,OAAY3D,MAE/B4D,MAAK,SAAAC,GACH,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,OAAKA,EAAahC,OAGPgC,EAAahC,OAAOiC,MAAMhC,KAAI,SAAAP,GAAK,MAAK,CAC3CQ,GAAIR,EAAMQ,GACVN,KAAMF,EAAME,KACZC,OAAQH,EAAMwC,QAAQ,GAAGtC,KACzBuC,MAAOzC,EAAMyC,MAAMvC,KACnBwC,IAAK1C,EAAM0C,QAPR,OAYnBC,aA/CY,SA+CCzC,EAAM0C,GACf,GAAK1C,GAAS0C,EAAUC,OAAxB,CAGA,IAEIC,EAFEvE,EAAc2C,EAAQC,iBACtBc,EAAU,CAACC,cAAc,UAAD,OAAY3D,IAG1C,OAAOyD,MAAM,gCAAiC,CAACC,QAASA,IACtDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEH,OADAQ,EAASR,EAAa9B,GACfwB,MAAM,aAAD,OAAcc,EAAd,cAAkC,CAC1Cb,QAASA,EACTc,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEhD,KAAMA,MAC9BiC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GACH,IAAMa,EAAab,EAAac,GAChC,OAAOpB,MAAM,aAAD,OAAcc,EAAd,sBAAkCK,EAAlC,WAAuD,CAC/DlB,QAASA,EACTc,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACR,IAAKE,eAWhC1B,IMOAmC,E,kDAjFb,WAAY5E,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXgC,cAAe,GACfM,eAAgB,GAChBD,aAAc,gBAGhB,EAAKnB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBACnB,EAAKyE,mBAAqB,EAAKA,mBAAmBzE,KAAxB,gBAC1B,EAAK0E,aAAe,EAAKA,aAAa1E,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAbG,E,4CAgBnB,SAASmB,GACP,IAAIM,EAASvB,KAAKL,MAAMsC,eACpBV,EAAOkD,MAAK,SAAAC,GAAU,OAAIA,EAAWjD,KAAOR,EAAMQ,QAGtDF,EAAOoD,KAAK1D,GACZjB,KAAKG,SAAS,CAAC8B,eAAgBV,O,yBAGjC,SAAYN,GACV,IAAIM,EAASvB,KAAKL,MAAMsC,eACxBV,EAASA,EAAOqD,QAAO,SAAAC,GAAY,OAAIA,EAAapD,KAAOR,EAAMQ,MACjEzB,KAAKG,SAAS,CAAC8B,eAAgBV,M,gCAGjC,SAAmBJ,GACjBnB,KAAKG,SAAS,CAAC6B,aAAcb,M,0BAG/B,WAAgB,IAAD,OACT0C,EAAY7D,KAAKL,MAAMsC,eAAeT,KAAI,SAAAP,GAAK,OAAIA,EAAM0C,OAC7DxB,EAAQyB,aAAa5D,KAAKL,MAAMqC,aAAc6B,GAAWT,MAAM,WAC7D,EAAKjD,SAAS,CACZ6B,aAAc,eACdC,eAAgB,U,oBAKtB,SAAOrC,GAAO,IAAD,OACXuC,EAAQtC,OAAOD,GAAMwD,MAAK,SAAAzB,GACxB,EAAKxB,SAAS,CAACwB,cAAeA,S,oBAIlC,WACE,OACE,gCACE,oCAAM,sBAAMrB,UAAU,YAAhB,iBAAN,SACA,sBAAKA,UAAU,MAAf,UAEE,cAAC,EAAD,CAAWL,SAAUD,KAAKH,SAE1B,sBAAKS,UAAU,eAAf,UAEE,cAAC,EAAD,CACAqB,cAAe3B,KAAKL,MAAMgC,cAC1BX,MAAOhB,KAAKa,WAEZ,cAAC,EAAD,CACAmB,aAAchC,KAAKL,MAAMqC,aACzBC,eAAgBjC,KAAKL,MAAMsC,eAC3Bf,SAAUlB,KAAKc,YACfgB,aAAc9B,KAAKuE,mBACnBrC,OAAUlC,KAAKwE,4B,GAvET9D,IAAMC,WCGTmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.24a4aaf2.chunk.js","sourcesContent":["const clientId = '9acae78f7cef4d69ac5c9fcb09a2b6b3';\r\nconst redirectUri = 'http://localhost:3000';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check fror access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            //this clears the parameters allowing us to grab the new access token when it expires\r\n\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`}\r\n            }\r\n        ).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            } else {\r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }))\r\n            }\r\n        })\r\n    },\r\n    savePlayList(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return\r\n        } \r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name})\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.Id;\r\n                return fetch(`/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({uri: trackUris})\r\n                })\r\n            })\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: '',\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    };\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input \r\n                placeholder=\"Enter A Song, Album, or Artist\" \r\n                onChange={this.handleTermChange}\r\n                />\r\n                <button className=\"SearchButton\" onClick={this.search} >SEARCH</button>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className='Track-action' onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className='Track-action' onClick={this.addTrack}>+</button>\r\n        };\r\n    };\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    };\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    };\r\n    render() {\r\n        return <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n\r\n                <h3>{this.props.track.name}</h3>\r\n\r\n                <p>{this.props.track.artist} | {this.props.track.artist}</p>\r\n                \r\n            </div>\r\n            {this.renderAction()}\r\n        </div>\r\n    };\r\n};\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track'\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track \r\n                        track={track} \r\n                        key={track.id} \r\n                        onAdd={this.props.onAdd}\r\n                        onRemove={this.props.onRemove}\r\n                        isRemoval={this.props.isRemoval}/>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../Tracklist/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n\r\n                <TrackList \r\n                tracks={this.props.searchResults}\r\n                onAdd={this.props.onAdd}\r\n                isRemoval={false} />\r\n                \r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport TrackList from '../Tracklist/TrackList';\r\n\r\nimport './Playlist.css'\r\n\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"Playlist\">\r\n\r\n                <input \r\n                defaultValue={this.props.playlistName}\r\n                onChange={this.handleNameChange} />\r\n\r\n                <TrackList \r\n                tracks={this.props.playlistTracks} \r\n                onRemove={this.props.onRemove} \r\n                isRemoval={true} \r\n                />\r\n\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave} >SAVE TO SPOTIFY</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults'\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistTracks: [],\n      playlistName: \"New Playlist\"\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  };\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({playlistTracks: tracks});\n  };\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  };\n\n  savePlaylist() {\n    let trackUris = this.state.playlistTracks.map(track => track.uri );\n    Spotify.savePlayList(this.state.playlistName, trackUris).then( () => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: [],\n      })\n    })\n  };\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n\n          <SearchBar onSearch={this.search} />\n\n          <div className=\"App-playlist\">\n\n            <SearchResults \n            searchResults={this.state.searchResults} \n            onAdd={this.addTrack}/>\n\n            <Playlist \n            playlistName={this.state.playlistName} \n            playlistTracks={this.state.playlistTracks} \n            onRemove={this.removeTrack} \n            onNameChange={this.updatePlaylistName} \n            onSave = {this.savePlaylist}/>\n\n          </div>\n        </div>\n      </div>\n    )\n  };\n};\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}