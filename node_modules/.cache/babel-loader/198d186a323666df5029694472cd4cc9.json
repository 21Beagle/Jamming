{"ast":null,"code":"const clientId = '9acae78f7cef4d69ac5c9fcb09a2b6b3';\nconst redirectUri = 'http://localhost:3000';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } // check fror access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); //this clears the parameters allowing us ot grab the new access token when it expires\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      } else {\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      }\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/JackB/jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","spotify","fetch","headers","authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,uBAApB;AACA,IAAIC,WAAJ;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,cAAc,GAAG;AACb,QAAIF,WAAJ,EAAiB;AACb,aAAOA,WAAP;AACH,KAHY,CAKb;;;AACA,UAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;AACA,UAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;AAEA,QAAIJ,gBAAgB,IAAIK,cAAxB,EAAwC;AACpCR,MAAAA,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;AACA,YAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB,CAFoC,CAIpC;;AAEAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,SAAS,GAAG,IAAtD;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AAEA,aAAOb,WAAP;AACH,KAVD,MAUO;AACH,YAAMc,SAAS,GAAI,oDAAmDhB,QAAS,kEAAiEC,WAAY,EAA5J;AACAK,MAAAA,MAAM,CAACC,QAAP,GAAkBS,SAAlB;AACH;AACJ,GAxBW;;AAyBZC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,UAAMhB,WAAW,GAAGiB,OAAO,CAACf,cAAR,EAApB;AACA,WAAOgB,KAAK,CAAE,kDAAiDF,IAAK,EAAxD,EAA2D;AACnEG,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASpB,WAAY;AADhC;AAD0D,KAA3D,CAAL,CAILqB,IAJK,CAIAC,QAAQ,IAAI;AACf,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KANM,EAMJF,IANI,CAMCG,YAAY,IAAI;AACpB,UAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACtB,eAAO,EAAP;AACH,OAFD,MAEO;AACH,eAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,KAAK;AAC3CC,UAAAA,EAAE,EAAED,KAAK,CAACC,EADiC;AAE3CC,UAAAA,IAAI,EAAEF,KAAK,CAACE,IAF+B;AAG3CC,UAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHkB;AAI3CG,UAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJwB;AAK3CI,UAAAA,GAAG,EAAEN,KAAK,CAACM;AALgC,SAAL,CAAnC,CAAP;AAOH;AACJ,KAlBM,CAAP;AAmBH;;AA9CW,CAAhB;AAqDA,eAAejC,OAAf","sourcesContent":["const clientId = '9acae78f7cef4d69ac5c9fcb09a2b6b3';\r\nconst redirectUri = 'http://localhost:3000';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check fror access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            //this clears the parameters allowing us ot grab the new access token when it expires\r\n\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n    search(term) {\r\n        const accessToken = spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                authorization: `Bearer ${accessToken}`}\r\n            }\r\n        ).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            } else {\r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}