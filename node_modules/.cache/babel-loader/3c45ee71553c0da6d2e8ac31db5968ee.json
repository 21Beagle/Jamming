{"ast":null,"code":"var clientId='9acae78f7cef4d69ac5c9fcb09a2b6b3';var redirectUri='http://localhost:3000';var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}// check fror access token match\nvar accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);//this clears the parameters allowing us to grab the new access token when it expires\nwindow.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}else{return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});}});},savePlayList:function savePlayList(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.Id;return fetch(\"/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uri:trackUris})});});});}};export default Spotify;","map":{"version":3,"sources":["C:/Users/JackB/jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","Id"],"mappings":"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","sourcesContent":["const clientId = '9acae78f7cef4d69ac5c9fcb09a2b6b3';\r\nconst redirectUri = 'http://localhost:3000';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check fror access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            //this clears the parameters allowing us to grab the new access token when it expires\r\n\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`}\r\n            }\r\n        ).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            } else {\r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }))\r\n            }\r\n        })\r\n    },\r\n    savePlayList(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return\r\n        } \r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name})\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.Id;\r\n                return fetch(`/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({uri: trackUris})\r\n                })\r\n            })\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}